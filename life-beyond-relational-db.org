


                Life Beyond Relational Database
                            -
                  Event Sourcing in Haskell

                    @abailly on twitter

                      arnaud@igitur.io

                      http://igitur.io

* Introduction

 - Thanks to nCrafts team for giving me space and time to 
   talk about things I love amongst so many people I admire

* Introduction

 - Thanks to nCrafts team for giving me space and time to 
   talk about things I love amongst so many people I admire

 - This draws on the past 2 years' experience developing 
   a peer-to-peer platform at Capital Match (http://www.capital-match.com)
   based on same techniques

* Introduction

 - Thanks to nCrafts team for giving me space and time to 
   talk about things I love amongst so many people I admire

 - This draws on the past 2 years' experience developing 
   a peer-to-peer platform at Capital Match (http://www.capital-match.com)
   based on same techniques

 - I assume knowledge of DDD and Event Sourcing terminology

* Introduction

 - Thanks to nCrafts team for giving me space and time to 
   talk about things I love amongst so many people I admire

 - This draws on the past 2 years' experience developing 
   a peer-to-peer platform at Capital Match (http://www.capital-match.com)
   based on same techniques

 - I assume knowledge of DDD and Event Sourcing terminology

 - This is pretty much a permanent work-in-progress

* Introduction

 - Thanks to nCrafts team for giving me space and time to 
   talk about things I love amongst so many people I admire

 - This draws on the past 2 years' experience developing 
   a peer-to-peer platform at Capital Match based on those
   techniques (see http://www.capital-match.com)

 - I assume knowledge of DDD and Event Sourcing terminology

 - This is pretty much a permanent work-in-progress

                *Feedback* welcomed

* Caveats

 - (lot of) *Hairy Haskell Code Inside*

* Caveats

 - (lot of) *Hairy Haskell Code Inside*

 - Not sure how much is understandable or even meaningful...

* Caveats

 - (lot of) *Hairy Haskell Code Inside*

 - Not sure how much is understandable or even meaningful...

 - Or this might be so obvious as not being worthy of notice...

* Caveats

 - (lot of) *Hairy Haskell Code Inside*

 - Not sure how much is understandable or even meaningful...

 - Or this might be so obvious as not being worthy of notice...

                 *Feedback* welcomed

* Really getting Out of the Tar Pit

  - *Divide quod impera*

* Really getting Out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language(s)
     -> aka. Ubiquitous language, use the language(s) of the domain(s)

* Really getting Out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language(s)
     -> aka. Ubiquitous language, use the language(s) of the domain(s)

 - Bounded contexts
     -> Small self-contained domain-centric services

* Really getting Out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language(s)
     -> aka. Ubiquitous language, use the language of the business domain

 - Bounded contexts
     -> Small self-contained domain-centric services

 - Hexagonal architecture
     -> Side-effects free business domain model composed within effectful context
   
* Really getting Out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language(s)
     -> aka. Ubiquitous language, use the language of the business domain

 - Bounded contexts
     -> Small self-contained domain-centric services

 - Hexagonal architecture
     -> Side-effects free business domain model composed within effectful context

 - Event Sourcing
     -> Immutable stream of events as the state of the system

       http://shaffner.us/cs/papers/tarpit.pdf

* A Simple Event Sourced Service from Scratch

 - A counter service:
   - Initial value is 0
   - Can =increment= counter with a positive value
   - Can =decrement= counter with a positive value
   - Can query state of the counter
   - Counter's value can not go below 0 or above 100

* What's been demoed

 - TDD w/ Property Based Testing
 - Purely functional model event sourced model
 - Services defined from composable effectful building blocks
 - Statically typed REST API w/ Servant (http://haskell-servant.github.io/)
 - Use the REPL, Luke!

* Takeaways

 - It's easy to define languages and pure models and to play with them

* Takeaways

 - It's easy to define languages and pure models and to play with them

 - Strong typing helps enforcing guarantees at all levels

* Takeaways

 - It's easy to define languages and pure models and to play with them

 - Strong typing helps enforcing guarantees at all levels

 - It's easy to test drive model with properties

* Takeaways

 - It's easy to define languages and pure models and to play with them

 - Strong typing helps enforcing guarantees at all levels

 - It's easy to test drive model with properties

 - Sophisticated type features makes it possible to define and
   compose DSL fragments

* Some Interesting References

 - http://okmij.org/ftp/Haskell/extensible/exteff.pdf: 
   Extensible effects theory and practice in Haskell

 - https://github.com/atnos-org/eff-cats: Same in Scala

 - http://www.cse.chalmers.se/~rjmh/Papers/QuickCheckST.ps: 
   Testing monadic code w/ QuickCheck

 - http://abailly.github.io/posts/cm-arch-design.html: (Shameless plug) 
   Blog post about the architecture implemented at Capital Match

 - https://github.com/abailly/hevents: (Shameless plug bis)
   Work-in-progress Haskell library to simplify developing
   event sourced systems
