* Out of the Tar Pit

  - Famous article by Peter Marks and Ben Moseley from 2006
      (http://shaffner.us/cs/papers/tarpit.pdf) 
  - OO is not the right tool to fight back complexity within systems
  - Promotes an approach based on
  - *Functional Programming*
  - and *Relational Algebra*

* Out of the Tar Pit, really?

 - Business domains are rarely relational (or functional)
 - We want to speak the language of the business
 - Hence the rise of *Domain Driven Design* and associated concepts
 - Services, Entities, Commands, Events..

* Really getting out of the Tar Pit

 - *Divide quod impera*

* Really getting out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language
     -> aka. Ubiquitous language, use the language of the business domain

* Really getting out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language
     -> aka. Ubiquitous language, use the language of the business domain

 - Bounded contexts
     -> Small self-contained domain-centric services

* Really getting out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language
     -> aka. Ubiquitous language, use the language of the business domain

 - Bounded contexts
     -> Small self-contained domain-centric services

 - Hexagonal architecture
     -> Side-effects free business domain model 
   
* Really getting out of the Tar Pit

 - *Divide quod impera*

 - Domain-focused language
     -> aka. Ubiquitous language, use the language of the business domain

 - Bounded contexts
     -> Small self-contained domain-centric services

 - Hexagonal architecture
     -> Side-effects free business domain model 

 - Event Sourcing
     -> Immutable stream of events as the state of the system

* A Simple Event Sourced Service from Scratch

 - A counter service:
   - Initial value is 0
   - Can =increment= counter with a positive value
   - Can =decrement= counter with a positive value
   - Can query state of the counter
   - Counter's value can not go below 0 or above 100

* What's demoed

 - TDD w/ Property Based Testing
 - Purely functional model event sourced model
 - Services defined from composable effectful building blocks
 - Statically typed REST API w/ Servant (http://haskell-servant.github.io/)
 - Use the REPL, Luke!

* Takeaways

 - It's easy to define languages and pure models and to play with them

* Takeaways

 - It's easy to define languages and pure models and to play with them
 - Strong typing helps enforcing guarantees at all levels

* Takeaways

 - It's easy to define languages and pure models and to play with them
 - It's easy to test drive model with properties
 - Strong typing helps enforcing guarantees at all levels

* Takeaways

 - It's easy to define languages and pure models and to play with them
 - It's easy to test drive model with properties
 - Strong typing helps enforcing guarantees at all levels
 - Sophisticated type features makes it possible to define and
   compose DSL fragments

* Some Interesting References

 - http://okmij.org/ftp/Haskell/extensible/exteff.pdf: Extensible effects theory and 
   practice in Haskell
 - https://github.com/atnos-org/eff-cats: Same in Scala
 - http://www.cse.chalmers.se/~rjmh/Papers/QuickCheckST.ps: Testing monadic code w/ QuickCheck
 - http://abailly.github.io/posts/cm-arch-design.html: (Shameless plug) Blog post about the architecture
   implemented at Capital Match
 - https://github.com/abailly/hevents: (Shameless plug bis) Work-in-progress Haskell library to
   simplify developing event sourced systems
